#!/bin/bash

# --------------------------------------------------------------
# iOSOpenDev -- iOS Open Development (http://www.iOSOpenDev.com)
# Copyright (C) 2012 Spencer W.S. James <dev@iosopendev.com>
# --------------------------------------------------------------
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# --------------------------------------------------------------
# iOSOpenDev is an independent project and has not been authorized, sponsored, or otherwise approved by Apple Inc.
# IOS is a registered trademark of Cisco and is used under license by Apple Inc.
# --------------------------------------------------------------

export setCmd="set -eo pipefail"
$setCmd

# path #
export PATH=/opt/iOSOpenDev/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH

# script #

export scriptName="${0##*/}"
export scriptVer="1.0.1"

export iOSOpenDevPath="/opt/iOSOpenDev"
export backupFileExt=".iOSOpenDev"

export userName="${SUDO_USER-$USER}"
export userGroup=`id -g $userName`
export userHome=`eval echo ~$userName`
export bashProfileFiles=("$userHome/.bash_profile" "$userHome/.bash_login" "$userHome/.profile")

export tempDirsFile="`mktemp -d -t iosod`/tempdirs"
touch "$tempDirsFile"

unset LANG

# development tools #

xcodeAsAppPath="/Applications/Xcode.app/Contents/Developer"
[[ ! -d "$xcodeAsAppPath" ]] || \
	export DEVELOPER_DIR="$xcodeAsAppPath"

# panic and cleanup #

function cleanup()
{
	local exitCode=$?
	set +e
	trap - $signals
	removeTempData
	exit $exitCode
}
function panic()
{
	local exitCode=$1
	set +e
	shift
	[[ "$@" == "" ]] || echo "$@" >&2
	exit $exitCode
}
export signals="0 1 2 3 15"
trap cleanup $signals

function removeTempData()
{
	local tempDirs
	if [[ -f "$tempDirsFile" ]]; then
		tempDirs=(`cat "$tempDirsFile"`)
		for td in "${tempDirs[@]}"; do
			rm -rf "$td" || true
		done
		rm -rf "`dirname $tempDirsFile`" || true
	fi
}
function getTempDir()
{
	$setCmd
	local tempDir	
	tempDir=`mktemp -d -t iosod` || \
		panic $? "Failed to create temporary directory"
	echo "$tempDir" >> "$tempDirsFile" || \
		panic $? "Failed to echo into $tempDirsFile"
	echo "$tempDir"
}

# common functions #

function copyFile()
{
	cp -f "$1" "$2" || \
		panic $? "Failed to copy file $1 to $2"
}

# sdk argument functions #

function getSdkProperty()
{
	$setCmd

	local sdk="$1"
	local propertyName="$2"

	propertyValue=`xcodebuild -version -sdk $sdk $propertyName` || \
		panic $? "Failed to get $sdk SDK property $propertyName"

	[[ $propertyValue != "" ]] || \
		panic 1 "Value of $sdk SDK property $propertyName cannot be empty"

	# return #
	echo "$propertyValue"
}

function getPlatformName()
{
	$setCmd

	local sdk="$1"
	local iosSdkPlatformPath
	local platformDir
	local platformName
	
	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`	
	platformDir="${iosSdkPlatformPath##*/}"
	platformName="${platformDir%.*}"
	
	# return #
	echo "$platformName"
}

function restoreFile()
{
	local filePath="$1"
	local backedUpFilePath="${filePath}${backupFileExt}"
	
	if [[ -f "$backedUpFilePath" ]]; then
		copyFile "$backedUpFilePath" "$filePath"	
		rm -f "$backedUpFilePath"
	fi
}

# script functions #

function requireOptionValue()
{
	[[ "$2" != "" ]] || \
		panic 1 "Missing value for $1 option"
}

function showUsage()
{
	panic 1 \
"$scriptName (v${scriptVer}) -- iOSOpenDev Uninstall
Usages:
   $scriptName base
   $scriptName sdk [-sdk <sdk>] [-d <directory>]

Arguments:
   base               Uninstall iOSOpenDev base and Xcode templates.
   sdk [-sdk <sdk>]   Undo iOSOpenDev modifications made to iOS SDK. Specify
                      SDK name and, optionally, version, as one word, using
                      <sdk>. If version is omitted, latest SDK version is used.
                      If <sdk> is omitted, latest iPhoneOS SDK is used.

Options:
   -d <directory>     Set environment variable DEVELOPER_DIR to <directory> to
                      target specific developer tools. Use of this option is
                      required only if Xcode 4.3 (or greater) has been
                      installed and you wish to target SDKs used by older
                      versions of Xcode. If Xcode 4.3 has not been installed
                      or SDKs used by prior Xcode versions are not to be
                      targeted, use of the option is not needed.
                      
Examples:
   Xcode 4.2 and 4.3 (or greater) are both installed and you wish to target the
   SDK used by 4.2:
      \`$scriptName sdk -d /Developer\`

   Xcode 4.2 and 4.3 (or greater) are both installed and you wish to target the
   SDK used by 4.3:
      \`$scriptName sdk\`

   Either Xcode 4.2 or 4.3 (or greater) is installed by itself:
      \`$scriptName sdk\`"
}

# begin script ... #

case "$1" in
base)
	echo "Uninstalling iOSOpenDev base and Xcode templates..."
	
	# base

	rm -rf "$iOSOpenDevPath" || \
		panic $? "Failed to remove directory: $iOSOpenDevPath"

	# symlink to templates
	
	userDevDir="$userHome/Library/Developer"
	userTemplatesDir="$userDevDir/Xcode/Templates"
	symlinkPath="$userTemplatesDir/iOSOpenDev"
	
	rm -f "$symlinkPath" || \
		panic $? "Failed to remove file: $symlinkPath"
			
	# bash profile

	for f in "${bashProfileFiles[@]}"; do
		if [[ -f "$f" ]]; then
			userBashProfileFile="$f"
			break
		fi
	done
		
	if [[ $userBashProfileFile != "" ]]; then
		sed -i "" "s/^export iOSOpenDevPath=.*$//g" "$userBashProfileFile"
		sed -i "" "s/^export iOSOpenDevDevice=.*$//g" "$userBashProfileFile"
		sed -i "" "s/^export PATH=.*${iOSOpenDevPath//\//\\/}\\/bin:.*$//g" "$userBashProfileFile"
		sed -i "" "s/^export PATH=.*\$iOSOpenDevPath\\/bin:.*$//g" "$userBashProfileFile"
	fi
;;
sdk)
	shift 1
	
	sdk="iphoneos" # default to latest iphoneos sdk
	
	while [[ $1 != "" ]]; do
	case "$1" in
		-sdk)
			requireOptionValue "$1" "$2"
			sdk="$2"
			shift 2
		;;
		-d)
			requireOptionValue "$1" "$2"
			export DEVELOPER_DIR="$2"
			shift 2
		;;
		*) panic 1 "Invalid option: $1" ;;
	esac
	done

	iosSdkPath=`getSdkProperty $sdk Path`
	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`

	# get sdk platform-name and version
	
	platformName=`getPlatformName "$sdk"`
	sdkVersion=`getSdkProperty "$sdk" "SDKVersion"`
	echo "Undoing modifications to $platformName $sdkVersion SDK..."

	# restore SDKSettings.plist

	restoreFile "$iosSdkPath/SDKSettings.plist"

	# restore xcspec files
	
	xcspecFileNamePrefix="$platformName"	
	[[ ! $xcspecFileNamePrefix =~ "Simulator" ]] || \
		xcspecFileNamePrefix="iPhone Simulator "

	restoreFile "$iosSdkPlatformPath/Developer/Library/Xcode/Specifications/${xcspecFileNamePrefix}PackageTypes.xcspec"
	restoreFile "$iosSdkPlatformPath/Developer/Library/Xcode/Specifications/${xcspecFileNamePrefix}ProductTypes.xcspec"
;;
*) showUsage ;;
esac

# done #
exit 0