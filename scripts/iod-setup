#!/bin/bash

# --------------------------------------------------------------
# iOSOpenDev -- iOS Open Development (http://www.iOSOpenDev.com)
# Copyright (C) 2012 Spencer W.S. James <dev@iosopendev.com>
# --------------------------------------------------------------
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# --------------------------------------------------------------
# iOSOpenDev is an independent project and has not been authorized, sponsored, or otherwise approved by Apple Inc.
# IOS is a registered trademark of Cisco and is used under license by Apple Inc.
# --------------------------------------------------------------

export setCmd="set -eo pipefail"
$setCmd

# script #

export scriptName="${0##*/}"
export scriptVer="1.0"

export iOSOpenDevPath="/opt/iOSOpenDev"
export backupFileExt=".iOSOpenDev"

export userName="${SUDO_USER-$USER}"
export userGroup=`id -g $userName`
export userHome=`eval echo ~$userName`
export bashProfileFiles=("$userHome/.bash_profile" "$userHome/.bash_login" "$userHome/.profile")

export tempDirsFile="`mktemp -d -t iosod`/tempdirs"
touch "$tempDirsFile"

unset LANG

# development tools #

xcodeAsAppPath="/Applications/Xcode.app/Contents/Developer"
[[ ! -d "$xcodeAsAppPath" ]] || \
	export DEVELOPER_DIR="$xcodeAsAppPath"

# panic and cleanup #

function cleanup()
{
	local exitCode=$?
	set +e
	trap - $signals
	removeTempData
	exit $exitCode
}
function panic()
{
	local exitCode=$1
	set +e
	shift
	[[ "$@" == "" ]] || echo "$@" >&2
	exit $exitCode
}
export signals="0 1 2 3 15"
trap cleanup $signals

function removeTempData()
{
	local tempDirs
	if [[ -f "$tempDirsFile" ]]; then
		tempDirs=(`cat "$tempDirsFile"`)
		for td in "${tempDirs[@]}"; do
			rm -rf "$td" || true
		done
		rm -rf "`dirname $tempDirsFile`" || true
	fi
}
function getTempDir()
{
	$setCmd
	local tempDir	
	tempDir=`mktemp -d -t iosod` || \
		panic $? "Failed to create temporary directory"
	echo "$tempDir" >> "$tempDirsFile" || \
		panic $? "Failed to echo into $tempDirsFile"
	echo "$tempDir"
}

# common functions #

function changeMode()
{
	local mode="$1"
	local target="$2"
	local recursive="$3"
	local options

	[[ $recursive != "true" ]] || \
		options="-R"

	if [[ -e "$target" ]]; then
		chmod $options "$mode" "$target" || \
			panic $? "Failed to change mode to $mode on $target"
	fi
}

# base argument functions #

function cloneGitRepo()
{
	local repoUrl="$1"
	local targetDir="$2"
	
	git clone "$repoUrl" "$targetDir" || \
		panic $? "Failed to clone git repo: $repoUrl"
}

function determineUserBashProfileFile()
{
	$setCmd

	local f
	local filePath
	
	for f in "${bashProfileFiles[@]}"; do
		if [[ -f "$f" ]]; then
			filePath="$f"
			echo "" >> "$f" || \
				panic $? "Failed to echo into $f"
			break
		fi
	done
	
	if [[ $filePath == "" ]]; then
		filePath="$bashProfileFiles"

		touch "$filePath" || \
			panic $? "Failed to touch $filePath"
			
		chown "$userName:$userGroup" "$filePath" || \
			panic $? "Failed to change owner-group of $filePath"
		
		changeMode 0600 "$filePath"
	fi
	
	# return #
	echo "$filePath"
}

function addToFileIfMissing()
{
	local filePath="$1"
	local pattern="$2"
	local value="$3"
	local doesContain

	doesContain=`doesFileContain "$filePath" "$pattern"`
	
	[[ $doesContain == true ]] || \
		echo "$value" >> "$filePath" || \
			panic $? "Failed to echo into $filePath"	
}

function doesFileContain()
{
	$setCmd
	
	local filePath="$1"
	local pattern="$2"
	local grepReturn
	local funcReturn
	
	set -e
	grep -Piq "$pattern" "$filePath" || grepReturn=$?
	set +e

	if [[ $grepReturn == "" || $grepReturn == 0 ]]; then # contains
		funcReturn=true
	elif [[ $grepReturn == 1 ]]; then # doesn't contain
		funcReturn=false
	else # error
		panic $grepReturn "Failed to grep $filePath"
	fi
	
	# return #
	echo $funcReturn
}

# sdk argument functions #

function getSdkProperty()
{
	$setCmd

	local sdk="$1"
	local propertyName="$2"

	propertyValue=`xcodebuild -version -sdk $sdk $propertyName` || \
		panic $? "Failed to get $sdk SDK property $propertyName"

	[[ $propertyValue != "" ]] || \
		panic 1 "Value of $sdk SDK property $propertyName cannot be empty"

	# return #
	echo "$propertyValue"
}

function getPlatformName()
{
	$setCmd

	local sdk="$1"
	local iosSdkPlatformPath
	local platformDir
	local platformName
	
	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`	
	platformDir="${iosSdkPlatformPath##*/}"
	platformName="${platformDir%.*}"
	
	# return #
	echo "$platformName"
}

function writeDefaults()
{
	local plistPath="$1"	
	shift 1

	defaults write "${plistPath%.*}" "$@" || \
		panic $? "Failed to write defaults to $plistPath"
}

function copyFile()
{
	cp -f "$1" "$2" || \
		panic $? "Failed to copy file $1 to $2"
}

function requireBackup()
{
	[[ ! -f "$1" || -f "${1}${backupFileExt}" ]] || \
		copyFile "$1" "${1}${backupFileExt}"
}

function requireFile()
{
	local filePath="$1"
	local touchFileIfNotFound="$2"
	
	if [[ ! -f "$filePath" ]]; then
		if [[ $touchFileIfNotFound == "true" ]]; then
			touch "$filePath" || \
				panic $? "Failed to touch $filePath"	
		else
			panic 1 "File $filePath not found"
		fi
	fi
}

function modifySdkSettings()
{
	local sdk="$1"
	local iosSdkPath
	local sdkSettingsPList
	
	iosSdkPath=`getSdkProperty $sdk Path`

	# backup SDKSettings.plist
	sdkSettingsPList="$iosSdkPath/SDKSettings.plist"
	requireFile "$sdkSettingsPList" false
	requireBackup "$sdkSettingsPList"

	# change SDKSettings.plist
	writeDefaults "$sdkSettingsPList" DefaultProperties "-dict-add" CODE_SIGNING_REQUIRED "-bool" NO
	writeDefaults "$sdkSettingsPList" DefaultProperties "-dict-add" ENTITLEMENTS_REQUIRED "-bool" NO
	writeDefaults "$sdkSettingsPList" DefaultProperties "-dict-add" AD_HOC_CODE_SIGNING_ALLOWED "-bool" YES
	
	# fix mode
	changeMode 0644 "$sdkSettingsPList"
}

function addXcodeSpecs()
{
	local sdk="$1"
	local platformName="$2"
	local iosSdkPlatformPath
	local xcspecFileNamePrefix
	
	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`
	
	# get *.xcspec filename prefix
	xcspecFileNamePrefix="$platformName"	
	[[ ! $xcspecFileNamePrefix =~ "Simulator" ]] || xcspecFileNamePrefix="iPhone Simulator "

	# backup *PackageTypes.xcspec
	iosPackagesTypesXCSpec="$iosSdkPlatformPath/Developer/Library/Xcode/Specifications/${xcspecFileNamePrefix}PackageTypes.xcspec"	
	requireFile "$iosPackagesTypesXCSpec" false
	requireBackup "$iosPackagesTypesXCSpec"

	# modify *PackageTypes.xcspec
	addXcodeSpec "$iosPackagesTypesXCSpec" "com.apple.package-type.mach-o-executable" '{Type=PackageType;Identifier=com.apple.package-type.mach-o-executable;Name="Mach-O Executable";Description="Mach-O executable";DefaultBuildSettings={EXECUTABLE_PREFIX="";EXECUTABLE_SUFFIX="";EXECUTABLE_NAME="$(EXECUTABLE_PREFIX)$(PRODUCT_NAME)$(EXECUTABLE_VARIANT_SUFFIX)$(EXECUTABLE_SUFFIX)";EXECUTABLE_PATH="$(EXECUTABLE_NAME)";};ProductReference={FileType=compiled.mach-o.executable;Name="$(EXECUTABLE_NAME)";IsLaunchable=YES;};}'
	addXcodeSpec "$iosPackagesTypesXCSpec" "com.apple.package-type.mach-o-dylib" '{Type=PackageType;Identifier=com.apple.package-type.mach-o-dylib;Name="Mach-O Dynamic Library";Description="Mach-O dynamic library";DefaultBuildSettings={EXECUTABLE_PREFIX="";EXECUTABLE_SUFFIX="";EXECUTABLE_NAME="$(EXECUTABLE_PREFIX)$(PRODUCT_NAME)$(EXECUTABLE_VARIANT_SUFFIX)$(EXECUTABLE_SUFFIX)";EXECUTABLE_PATH="$(EXECUTABLE_NAME)";};ProductReference={FileType=compiled.mach-o.dylib;Name="$(EXECUTABLE_NAME)";IsLaunchable=NO;};}'

	# backup *ProductTypes.xcspec
	iosProductTypesXCSpec="$iosSdkPlatformPath/Developer/Library/Xcode/Specifications/${xcspecFileNamePrefix}ProductTypes.xcspec"
	requireFile "$iosProductTypesXCSpec" false
	requireBackup "$iosProductTypesXCSpec"

	# modify *ProductTypes.xcspec
	addXcodeSpec "$iosProductTypesXCSpec" "com.apple.product-type.tool" '{Type=ProductType;Identifier=com.apple.product-type.tool;Class=PBXToolProductType;Name="Command-line Tool";Description="Standalone command-line tool";IconNamePrefix="TargetExecutable";DefaultTargetName="Command-line Tool";DefaultBuildProperties={FULL_PRODUCT_NAME="$(EXECUTABLE_NAME)";EXECUTABLE_PREFIX="";EXECUTABLE_SUFFIX="";REZ_EXECUTABLE=YES;INSTALL_PATH="/usr/bin";FRAMEWORK_FLAG_PREFIX="-framework";LIBRARY_FLAG_PREFIX="-l";LIBRARY_FLAG_NOSPACE=YES;GCC_DYNAMIC_NO_PIC=NO;GCC_SYMBOLS_PRIVATE_EXTERN=YES;GCC_INLINES_ARE_PRIVATE_EXTERN=YES;STRIP_STYLE="all";CODE_SIGNING_ALLOWED=YES;ENTITLEMENTS_ALLOWED=YES;MACH_O_TYPE="mh_execute";};PackageTypes=(com.apple.package-type.mach-o-executable);}'	
	addXcodeSpec "$iosProductTypesXCSpec" "com.apple.product-type.library.dynamic" '{Type=ProductType;Identifier=com.apple.product-type.library.dynamic;Class=PBXDynamicLibraryProductType;Name="Dynamic Library";Description="Dynamic library";IconNamePrefix="TargetLibrary";DefaultTargetName="Dynamic Library";DefaultBuildProperties={FULL_PRODUCT_NAME="$(EXECUTABLE_NAME)";MACH_O_TYPE="mh_dylib";REZ_EXECUTABLE=YES;EXECUTABLE_SUFFIX=".$(EXECUTABLE_EXTENSION)";EXECUTABLE_EXTENSION="dylib";PUBLIC_HEADERS_FOLDER_PATH="/usr/include";PRIVATE_HEADERS_FOLDER_PATH="/usr/include";INSTALL_PATH="/usr/lib";DYLIB_INSTALL_NAME_BASE="$(INSTALL_PATH)";LD_DYLIB_INSTALL_NAME="$(DYLIB_INSTALL_NAME_BASE:standardizepath)/$(EXECUTABLE_PATH)";DYLIB_COMPATIBILITY_VERSION="1";DYLIB_CURRENT_VERSION="1";FRAMEWORK_FLAG_PREFIX="-framework";LIBRARY_FLAG_PREFIX="-l";LIBRARY_FLAG_NOSPACE=YES;STRIP_STYLE="debugging";GCC_INLINES_ARE_PRIVATE_EXTERN=YES;CODE_SIGNING_ALLOWED=YES;};PackageTypes=(com.apple.package-type.mach-o-dylib);}'
}

function addXcodeSpec()
{
	local specFile="$1"
	local specId="$2"
	local specData="$3"
	local grepValue
	local tempDir
	local tempFile
	local defaultsRead
	
	grepValue=`grepFileForValue "$specId" "$specFile"`
		
	if [[ $grepValue == "" ]]; then
	
		# output xcspec file to temp plist file
		
		tempDir=`getTempDir`		
		tempFile="$tempDir/`basename $specFile`.plist"
		
		echo "plist=" > "$tempFile" || \
			panic $? "Failed to echo into temporary file $tempFile"
			
		cat "$specFile" >> "$tempFile" || \
			panic $? "Failed to cat file $specFile into temporary file $tempFile"
			
		echo ";" >> "$tempFile" || \
			panic $? "Failed to echo into temporary file $tempFile"

		# write specData to temp plist file

		writeDefaults "$tempFile" plist "-array-add" "$specData"

		# output temp plist file to temp xcspec file
		
		defaultsRead=`readDefaultsValue "$tempFile" "plist"`

		echo "$defaultsRead" > "${tempFile%.*}" || \
			panic $? "Failed to echo into temporary file ${tempFile%.*}"
			
		# overwrite existing xcspec file with temp xcspec file

		copyFile "${tempFile%.*}" "$specFile"
	fi
}

function grepFileForValue()
{
	$setCmd
	
	local pattern="$1"
	local filePath="$2"
	local grepExit
	local value
	
	set +e
	value=`grep -Poi "$pattern" "$filePath"` || grepExit=$?
	set -e
	
	[[ $grepExit != 2 ]] || \
		panic $grepExit "Failed to grep $filePath"

	# return #
	echo "$value"
}

function readDefaultsValue()
{
	$setCmd
	
	local plistPath="$1"
	local propertyName="$2"
	local value
	
	value=`defaults read "${plistPath%.*}" "$propertyName"` || \
		panic $? "Failed to read defaults property $propertyName from $plistPath"

	# return #
	echo "$value"
}

function addSymlinksToPathAvailableDuringBuilds()
{
	local sdk="$1"
	local iosSdkPlatformPath
	local dpkgdebPath

	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`
	
	# add symlinks to path that's available during an Xcode Build Phase Run Script
	createSymlink "$iOSOpenDevPath/bin/iosod" "$iosSdkPlatformPath/Developer/usr/bin/iosod"
	createSymlink "$iOSOpenDevPath/bin/ldid" "$iosSdkPlatformPath/Developer/usr/bin/ldid"

	dpkgdebPath=`findMacPortsBin "dpkg-deb"`

	[[ $dpkgdebPath != "" ]] || \
		panic 1 "Unable to locate dpkg-deb. Make sure it is installed and in the PATH. If it is not installed then use MacPorts to install it by typing \`sudo port -f install dpkg\` in Terminal. If MacPorts is not installed, download it from http://www.macports.org/ and install it and install dpkg. Then re-run the iOSOpenDev Installer."
	
	createSymlink "$dpkgdebPath" "$iosSdkPlatformPath/Developer/usr/bin/dpkg-deb"
}

function findMacPortsBin()
{
	$setCmd

	local bin="$1"
	local path=""

	path=`which $bin` || true
	
	if [[ $path == "" ]] && [[ -f "/opt/local/bin/$bin" ]]; then
		path="/opt/local/bin/$bin"
	fi

	# return #
	echo "$path"
}

function createSymlink()
{
	local sourcePath="$1"
	local linkPath="$2"
	
	rm -f "$linkPath"
	
	ln -fhs "$sourcePath" "$linkPath" || \
		panic $? "Failed to create symbolic link $linkPath -> $sourcePath"
}

# script functions #

function requireOptionValue()
{
	[[ "$2" != "" ]] || \
		panic 1 "Missing value for $1 option"
}

function showUsage()
{
	panic 1 \
"$scriptName (v${scriptVer}) -- iOSOpenDev Setup
Usages:
   $scriptName base
   $scriptName sdk [-sdk <sdk>] [-d <directory>]

Arguments:
   base               Set up iOSOpenDev base and Xcode templates.
   sdk [-sdk <sdk>]   SDK name and, optionally, version, as one word, to set
                      up for \"open\" development. If version is omitted,
                      latest SDK version is used. If <sdk> is entirely omitted,
                      latest iPhoneOS SDK is used.

Options:
   -d <directory>     Set environment variable DEVELOPER_DIR to <directory> to
                      target specific developer tools. Use of this option is
                      required only if Xcode 4.3 (or greater) has been
                      installed and you wish to target SDKs used by older
                      versions of Xcode. If Xcode 4.3 has not been installed
                      or SDKs used by prior Xcode versions are not to be
                      targeted, use of the option is not needed.
                      
Examples:
   Xcode 4.2 and 4.3 (or greater) are both installed and you wish to target the
   SDK used by 4.2:
      \`$scriptName sdk -d /Developer\`

   Xcode 4.2 and 4.3 (or greater) are both installed and you wish to target the
   SDK used by 4.3:
      \`$scriptName sdk\`

   Either Xcode 4.2 or 4.3 (or greater) is installed by itself:
      \`$scriptName sdk\`"
}

# begin script ... #

case "$1" in
base)
	
	# get iOSOpenDev base, frameworks and templates #
	
	echo "Downloading base, frameworks and templates from GitHub..."
	
	[[ ! -d "$iOSOpenDevPath" ]] || \
		rm -rf "$iOSOpenDevPath" || \
			panic $? "Failed to remove existing directory: $iOSOpenDevPath"
	
	mkdir -p "$iOSOpenDevPath" || \
		panic $? "Failed to make directory: $iOSOpenDevPath"
	
	cloneGitRepo "git://github.com/kokoabim/iOSOpenDev.git" "$iOSOpenDevPath"
	cloneGitRepo "git://github.com/kokoabim/iOSOpenDev-Xcode-Templates.git" "$iOSOpenDevPath/templates"
	cloneGitRepo "git://github.com/kokoabim/iOSOpenDev-Framework-Header-Files.git" "$iOSOpenDevPath/frameworks"
	
	# symlink to templates #
	
	echo "Creating symlink to Xcode templates..."
	
	userDevDir="$userHome/Library/Developer"
	userTemplatesDir="$userDevDir/Xcode/Templates"
	
	if [[ ! -d "$userTemplatesDir" ]]; then
		mkdir -p "$userTemplatesDir" || \
			panic $? "Failed to make directory: $userTemplatesDir"
			
		chown -R "$userName:$userGroup" "$userDevDir" || \
			panic $? "Failed to change ownership-group of $userDevDir"
	fi
	
	ln -fhs "$iOSOpenDevPath/templates" "$userTemplatesDir/iOSOpenDev"
	
	# bash profile #
	
	echo "Modifying Bash personal initialization file..."
	
	userBashProfileFile=`determineUserBashProfileFile`
	
	addToFileIfMissing "$userBashProfileFile" "^(export)? *iOSOpenDevPath=.*" "export iOSOpenDevPath=$iOSOpenDevPath"
	addToFileIfMissing "$userBashProfileFile" "^(export)? *iOSOpenDevDevice=.*" "export iOSOpenDevDevice="
	addToFileIfMissing "$userBashProfileFile" "^(export)? *PATH=.*(\\\$iOSOpenDevPath/bin|$iOSOpenDevPath/bin).*" "export PATH=$iOSOpenDevPath/bin:\$PATH"
	addToFileIfMissing "$userBashProfileFile" "^(export)? *PATH=.*/opt/local/bin:.*" "export PATH=/opt/local/bin:\$PATH"
	addToFileIfMissing "$userBashProfileFile" "^(export)? *PATH=.*/opt/local/sbin:.*" "export PATH=/opt/local/sbin:\$PATH"

;;
	
sdk)
	
	shift 1
	
	sdk="iphoneos" # default to latest iphoneos sdk
	
	while [[ $1 != "" ]]; do
	case "$1" in
		-sdk)
			requireOptionValue "$1" "$2"
			sdk="$2"
			shift 2
		;;
		-d)
			requireOptionValue "$1" "$2"
			export DEVELOPER_DIR="$2"
			shift 2
		;;
		*) panic 1 "Invalid option: $1" ;;
	esac
	done

	# get sdk platform-name and version
	
	platformName=`getPlatformName "$sdk"`
	sdkVersion=`getSdkProperty "$sdk" "SDKVersion"`
	echo "Setting up $platformName $sdkVersion SDK..."
	
	# modify SDK settings
	
	echo "Modifying SDK settings..."
	modifySdkSettings "$sdk"

	# add Xcode specifications
	
	echo "Adding specifications to platform..."
	addXcodeSpecs "$sdk" "$platformName"

	# create symlinks so be available in PATH during Xcode builds
	
	echo "Creating symlinks in platform bin..."
	addSymlinksToPathAvailableDuringBuilds "$sdk"

;;

*) showUsage ;;
esac

# done #

exit 0
