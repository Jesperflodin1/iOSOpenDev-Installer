#!/bin/bash

# --------------------------------------------------------------
# iOSOpenDev -- iOS Open Development (http://www.iOSOpenDev.com)
# Copyright (C) 2012 Spencer W.S. James <dev@iosopendev.com>
# --------------------------------------------------------------

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# iOSOpenDev is an independent project and has not been authorized, sponsored, or otherwise approved by Apple Inc.
# IOS is a registered trademark of Cisco.
# Xcode is a registered trademark of Apple Inc.

export setCmd="set -eo pipefail"
$setCmd

export scriptName="${0##*/}"
export scriptVer="1.0.1"
export iOSOpenDevPath="/opt/iOSOpenDev"

export backupFileExt=".iOSOpenDev"
export iosodBin="iosod"

export tempDirsFile="`mktemp -d -t iosod`/tempdirs"
touch "$tempDirsFile"

unset LANG

function cleanup() # no args
{
	local exitCode=$?
	set +e
	trap - $signals
	
	removeTempData
	
	exit $exitCode
}
export signals="0 1 2 3 15"
trap cleanup $signals

function panic() # args: exitCode, message
{
	local exitCode=$1
	set +e
	
	[[ "$2" == "" ]] || \
		echo "$2" >&2

	exit $exitCode
}

# === functions === #

function removeTempData() # no args
{
	local tempDirs
	
	if [[ -f "$tempDirsFile" ]]; then
		tempDirs=(`cat "$tempDirsFile"`)
		
		for td in "${tempDirs[@]}"; do
			rm -rf "$td" || true # forget abou' it.
		done
		
		rm -rf "`dirname $tempDirsFile`" || true # forget abou' it.
	fi
}

function getTempDir() # no args
{
	$setCmd
	
	local tempDir
	
	tempDir=`mktemp -d -t iosod` || \
		panic $? "Failed to create temporary directory"

	# remember the temp dir path; in cleanup() these are rm'd #
	
	echo "$tempDir" >> "$tempDirsFile" || \
		panic $? "Failed to echo into temporary file $tempDirsFile"

	# return #
	echo "$tempDir"
}

function findMPBin() # args: bin
{
	$setCmd

	local bin="$1"
	local path=""

	path=`which $bin` || true
	
	if [[ $path == "" ]] && [[ -f "/opt/local/bin/$bin" ]]; then
		path="/opt/local/bin/$bin"
	fi

	# return #
	echo "$path"
}

function requireDir() # args: dirPath [, makeDirIfNotFound]
{
	local dirPath="$1"
	local makeDirIfNotFound="$2"
				
	if [[ ! -d "$dirPath" ]]; then
		if [[ $makeDirIfNotFound == true ]]; then
			mkdir -p "$dirPath" || \
				panic $? "Failed to create directory $dirPath"
		else
			panic 1 "Directory $dirPath not found"
		fi
	fi
}

function createSymlink() # args: $sourcePath, $linkPath
{
	local sourcePath="$1"
	local linkPath="$2"
	
	rm -f "$linkPath"
	
	ln -fhs "$sourcePath" "$linkPath" || \
		panic $? "Failed to create symbolic link $linkPath -> $sourcePath"
}

function readDefaultsValue() # args: plistPath, propertyName
{
	$setCmd
	
	local plistPath="$1"
	local propertyName="$2"
	local value
	
	value=`defaults read "$plistPath" "$propertyName"` || \
		panic $? "Failed to read defaults property $propertyName from $plistPath"

	# return #
	echo "$value"
}

function addXcodeSpec() # args: specFile, specId, specData
{
	local specFile="$1"
	local specId="$2"
	local specData="$3"
	local grepValue
	local tempDir
	local tempFile
	local defaultsRead
	
	grepValue=`grepFileForValue "$specId" "$specFile"`
		
	if [[ $grepValue == "" ]]; then
	
		# output xcspec file to temp plist file #
		
		tempDir=`getTempDir`		
		tempFile="$tempDir/`basename $specFile`.plist"
		
		echo "plist=" > "$tempFile" || \
			panic $? "Failed to echo into temporary file $tempFile"
			
		cat "$specFile" >> "$tempFile" || \
			panic $? "Failed to cat file $specFile into temporary file $tempFile"
			
		echo ";" >> "$tempFile" || \
			panic $? "Failed to echo into temporary file $tempFile"

		# write specData to temp plist file #

		writeDefaults "$tempFile" plist "-array-add" "$specData"

		# output temp plist file to temp xcspec file #
		
		defaultsRead=`readDefaultsValue "${tempFile%.*}" "plist"`
				
		echo "$defaultsRead" > "${tempFile%.*}" || \
			panic $? "Failed to echo into temporary file ${tempFile%.*}"
			
		# overwrite existing xcspec file with temp xcspec file #

		copyFile "${tempFile%.*}" "$specFile"
	fi
}

function grepFileForValue() # args: pattern, filePath
{
	$setCmd
	
	local pattern="$1"
	local filePath="$2"
	local grepExit
	local value
	
	set +e
	value=`grep -Poi "$pattern" "$filePath"` || grepExit=$?
	set -e
	
	[[ $grepExit != 2 ]] || \
		panic $grepExit "Failed to grep $filePath"

	# return #
	echo "$value"
}

function writeDefaults() #args: plistPath, ...
{
	local plistPath="$1"	
	shift

	defaults write "${plistPath%.*}" "$@" || \
		panic $? "Failed to write defaults to $plistPath"
}

function copyFile() # args: sourceFile, targetDirOrFile
{
	local sourceFile="$1"
	local targetDirOrFile="$2"
	
	cp -f "$sourceFile" "$targetDirOrFile" || \
		panic $? "Failed to copy file $sourceFile to $targetDirOrFile"
}

function requireBackup() # args: filePath
{
	local filePath="$1"

	if [[ -f "$filePath" ]] && [[ ! -f "${filePath}${backupFileExt}" ]]; then
		copyFile "$filePath" "${filePath}${backupFileExt}" true
	fi
}

function requireFile() # args: filePath [, touchFileIfNotFound]
{
	local filePath="$1"
	local touchFileIfNotFound="$2"
	
	if [[ ! -f "$filePath" ]]; then
		if [[ $touchFileIfNotFound == true ]]; then
			touch "$filePath" || \
				panic $? "Failed to touch $filePath"	
		else
			panic 1 "File $filePath not found"
		fi
	fi
}

function getSdkProperty() # args: sdk, propertyName
{
	$setCmd

	local sdk="$1"
	local propertyName="$2"
	
	propertyValue=`xcodebuild -version -sdk $sdk $propertyName` || \
		panic $? "Failed to get $sdk SDK property $propertyName"
		
	# return #
	echo "$propertyValue"
}

function requireVarValue() # args: value, panicMessage
{
	local value="$1"
	local panicMessage="$2"
	
	[[ $value != "" ]] || \
		panic 1 "$panicMessage"
}

function changeMode() # args: mode, target [, recursive]
{
	local mode="$1"
	local target="$2"
	local recursive="$3"
	local options

	[[ $recursive == false ]] || \
		options="-R"

	if [[ -e "$target" ]]; then
		chmod $options "$mode" "$target" || \
			panic $? "Failed to change mode to $mode on $target"
	fi
}

function modifySdkSettings() # arg: sdk
{
	local sdk="$1"
	local iosSdkPath
	local sdkSettingsPList
	
	iosSdkPath=`getSdkProperty $sdk Path`
	requireVarValue "$iosSdkPath" "Failed to get $sdk SDK property Path"

	# backup SDKSettings.plist
	sdkSettingsPList="$iosSdkPath/SDKSettings.plist"
	requireFile "$sdkSettingsPList" false
	requireBackup "$sdkSettingsPList"

	# change SDKSettings.plist
	writeDefaults "$sdkSettingsPList" DefaultProperties "-dict-add" CODE_SIGNING_REQUIRED "-bool" NO
	writeDefaults "$sdkSettingsPList" DefaultProperties "-dict-add" ENTITLEMENTS_REQUIRED "-bool" NO
	writeDefaults "$sdkSettingsPList" DefaultProperties "-dict-add" AD_HOC_CODE_SIGNING_ALLOWED "-bool" YES
	
	# fix mode
	changeMode 0644 "$sdkSettingsPList"
}

function getPlatformName() # args: sdk
{
	$setCmd

	local sdk="$1"
	local iosSdkPlatformPath
	local platformDir
	local platformName
	
	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`
	requireVarValue "$iosSdkPlatformPath" "Failed to get $sdk SDK property PlatformPath"
	
	platformDir="${iosSdkPlatformPath##*/}"
	platformName="${platformDir%.*}"
	
	# return #
	echo "$platformName"
}

function addXcodeSpecs() # args: sdk, platformName
{
	local sdk="$1"
	local platformName="$2"
	local iosSdkPlatformPath
	local xcspecFileNamePrefix
	
	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`
	requireVarValue "$iosSdkPlatformPath" "Failed to get $sdk SDK property PlatformPath"
	
	# get *.xcspec filename prefix
	xcspecFileNamePrefix="$platformName"	
	[[ ! $xcspecFileNamePrefix =~ "Simulator" ]] || xcspecFileNamePrefix="iPhone Simulator "

	# backup *PackageTypes.xcspec
	iosPackagesTypesXCSpec="$iosSdkPlatformPath/Developer/Library/Xcode/Specifications/${xcspecFileNamePrefix}PackageTypes.xcspec"	
	requireFile "$iosPackagesTypesXCSpec" false
	requireBackup "$iosPackagesTypesXCSpec"

	# modify *PackageTypes.xcspec
	addXcodeSpec "$iosPackagesTypesXCSpec" "com.apple.package-type.mach-o-executable" '{Type=PackageType;Identifier=com.apple.package-type.mach-o-executable;Name="Mach-O Executable";Description="Mach-O executable";DefaultBuildSettings={EXECUTABLE_PREFIX="";EXECUTABLE_SUFFIX="";EXECUTABLE_NAME="$(EXECUTABLE_PREFIX)$(PRODUCT_NAME)$(EXECUTABLE_VARIANT_SUFFIX)$(EXECUTABLE_SUFFIX)";EXECUTABLE_PATH="$(EXECUTABLE_NAME)";};ProductReference={FileType=compiled.mach-o.executable;Name="$(EXECUTABLE_NAME)";IsLaunchable=YES;};}'
	addXcodeSpec "$iosPackagesTypesXCSpec" "com.apple.package-type.mach-o-dylib" '{Type=PackageType;Identifier=com.apple.package-type.mach-o-dylib;Name="Mach-O Dynamic Library";Description="Mach-O dynamic library";DefaultBuildSettings={EXECUTABLE_PREFIX="";EXECUTABLE_SUFFIX="";EXECUTABLE_NAME="$(EXECUTABLE_PREFIX)$(PRODUCT_NAME)$(EXECUTABLE_VARIANT_SUFFIX)$(EXECUTABLE_SUFFIX)";EXECUTABLE_PATH="$(EXECUTABLE_NAME)";};ProductReference={FileType=compiled.mach-o.dylib;Name="$(EXECUTABLE_NAME)";IsLaunchable=NO;};}'

	# backup *ProductTypes.xcspec
	iosProductTypesXCSpec="$iosSdkPlatformPath/Developer/Library/Xcode/Specifications/${xcspecFileNamePrefix}ProductTypes.xcspec"
	requireFile "$iosProductTypesXCSpec" false
	requireBackup "$iosProductTypesXCSpec"

	# modify *ProductTypes.xcspec
	addXcodeSpec "$iosProductTypesXCSpec" "com.apple.product-type.tool" '{Type=ProductType;Identifier=com.apple.product-type.tool;Class=PBXToolProductType;Name="Command-line Tool";Description="Standalone command-line tool";IconNamePrefix="TargetExecutable";DefaultTargetName="Command-line Tool";DefaultBuildProperties={FULL_PRODUCT_NAME="$(EXECUTABLE_NAME)";EXECUTABLE_PREFIX="";EXECUTABLE_SUFFIX="";REZ_EXECUTABLE=YES;INSTALL_PATH="/usr/bin";FRAMEWORK_FLAG_PREFIX="-framework";LIBRARY_FLAG_PREFIX="-l";LIBRARY_FLAG_NOSPACE=YES;GCC_DYNAMIC_NO_PIC=NO;GCC_SYMBOLS_PRIVATE_EXTERN=YES;GCC_INLINES_ARE_PRIVATE_EXTERN=YES;STRIP_STYLE="all";CODE_SIGNING_ALLOWED=YES;ENTITLEMENTS_ALLOWED=YES;MACH_O_TYPE="mh_execute";};PackageTypes=(com.apple.package-type.mach-o-executable);}'	
	addXcodeSpec "$iosProductTypesXCSpec" "com.apple.product-type.library.dynamic" '{Type=ProductType;Identifier=com.apple.product-type.library.dynamic;Class=PBXDynamicLibraryProductType;Name="Dynamic Library";Description="Dynamic library";IconNamePrefix="TargetLibrary";DefaultTargetName="Dynamic Library";DefaultBuildProperties={FULL_PRODUCT_NAME="$(EXECUTABLE_NAME)";MACH_O_TYPE="mh_dylib";REZ_EXECUTABLE=YES;EXECUTABLE_SUFFIX=".$(EXECUTABLE_EXTENSION)";EXECUTABLE_EXTENSION="dylib";PUBLIC_HEADERS_FOLDER_PATH="/usr/include";PRIVATE_HEADERS_FOLDER_PATH="/usr/include";INSTALL_PATH="/usr/lib";DYLIB_INSTALL_NAME_BASE="$(INSTALL_PATH)";LD_DYLIB_INSTALL_NAME="$(DYLIB_INSTALL_NAME_BASE:standardizepath)/$(EXECUTABLE_PATH)";DYLIB_COMPATIBILITY_VERSION="1";DYLIB_CURRENT_VERSION="1";FRAMEWORK_FLAG_PREFIX="-framework";LIBRARY_FLAG_PREFIX="-l";LIBRARY_FLAG_NOSPACE=YES;STRIP_STYLE="debugging";GCC_INLINES_ARE_PRIVATE_EXTERN=YES;CODE_SIGNING_ALLOWED=YES;};PackageTypes=(com.apple.package-type.mach-o-dylib);}'
}

function addSymlinksToPathAvailableDuringBuilds() # args: sdk
{
	local sdk="$1"
	local iosSdkPlatformPath
	local dpkgdebPath

	iosSdkPlatformPath=`getSdkProperty $sdk PlatformPath`
	requireVarValue "$iosSdkPlatformPath" "Failed to get $sdk SDK property PlatformPath"
	
	# add symlinks to path that's available during an Xcode Build Phase Run Script
	createSymlink "$iOSOpenDevPath/bin/$iosodBin" "$iosSdkPlatformPath/Developer/usr/bin/$iosodBin"
	createSymlink "$iOSOpenDevPath/bin/ldid" "$iosSdkPlatformPath/Developer/usr/bin/ldid"

	dpkgdebPath=`findMPBin "dpkg-deb"`
	
	[[ $dpkgdebPath != "" ]] || \
		panic 1 "Unable to locate dpkg-deb. Make sure it is installed and in the PATH. If it is not installed then use MacPorts to install it by typing \`sudo port -f install dpkg\` in Terminal. If MacPorts is not installed, download it from http://www.macports.org/ and install it and install dpkg. Then re-run the iOSOpenDev Installer."
	
	createSymlink "$dpkgdebPath" "$iosSdkPlatformPath/Developer/usr/bin/dpkg-deb"
}

# options #

export sdk="iphoneos"

function requireArgValue()
{
	if [[ $2 == "" ]]; then
		echo "Missing argument value: $1"
		exit 1
	fi
}

while [[ "$1" != "" ]]; do case "$1" in
	-h|--help)
		echo "iOSOpenDev -- setup SDK for \"open\" development
Usage:
    $scriptName [-sdk <sdk>]

Argument:
    -sdk <sdk>   SDK name and (optionally) version, as one word, to setup. If
                 version is ommitted, latest SDK version is used. If argument
                 is entirely ommitted, latest iPhoneOS SDK is used."
		exit 1
	;;
	-s|-sdk)
		requireArgValue "$1" "$2"
		sdk="$2"
		shift 2
	;;
	*)
		echo "Invalid option: $1"
		exit 1
	;;
esac; done

# start #

export platformName=`getPlatformName "$sdk"`
export sdkVersion=`getSdkProperty "$sdk" "SDKVersion"`
echo "Setting up $platformName $sdkVersion SDK..."

echo "Modifying SDK settings..."
modifySdkSettings "$sdk"

echo "Adding Xcode specifications to platform..."
addXcodeSpecs "$sdk" "$platformName"

echo "Creating symlinks in platform bin..."
addSymlinksToPathAvailableDuringBuilds "$sdk"

# finished #

exit 0
