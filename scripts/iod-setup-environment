#!/bin/bash

# --------------------------------------------------------------
# iOSOpenDev -- iOS Open Development (http://www.iOSOpenDev.com)
# Copyright (C) 2012 Spencer W.S. James <dev@iosopendev.com>
# --------------------------------------------------------------

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# iOSOpenDev is an independent project and has not been authorized, sponsored, or otherwise approved by Apple Inc.
# IOS is a registered trademark of Cisco.

export setCmd="set -eo pipefail"
$setCmd

export scriptName="${0##*/}"
export scriptVer="1.0.2"
export iOSOpenDevPath="/opt/iOSOpenDev"

export userName="${SUDO_USER-$USER}"
export userGroup=`id -g $userName`
export userHome=`eval echo ~$userName`
export userBashProfileFile
export bashProfileFiles=("$userHome/.bash_profile" "$userHome/.bash_login" "$userHome/.profile")

export tempDirsFile="`mktemp -d -t iosod`/tempdirs"
touch "$tempDirsFile"

unset LANG

function cleanup() # no args
{
	local exitCode=$?
	set +e
	trap - $signals
	
	removeTempData
	
	exit $exitCode
}
export signals="0 1 2 3 15"
trap cleanup $signals

function panic() # args: exitCode, message
{
	local exitCode=$1
	set +e
	
	[[ "$2" == "" ]] || \
		echo "$2" >&2

	exit $exitCode
}

# === functions === #

function removeTempData() # no args
{
	local tempDirs
	
	if [[ -f "$tempDirsFile" ]]; then
		tempDirs=(`cat "$tempDirsFile"`)
		
		for td in "${tempDirs[@]}"; do
			rm -rf "$td" || true # forget abou' it.
		done
		
		rm -rf "`dirname $tempDirsFile`" || true # forget abou' it.
	fi
}

function getTempDir() # no args
{
	$setCmd
	
	local tempDir
	
	tempDir=`mktemp -d -t iosod` || \
		panic $? "Failed to create temporary directory"

	# remember the temp dir path; in cleanup() these are rm'd #
	
	echo "$tempDir" >> "$tempDirsFile" || \
		panic $? "Failed to echo into temporary file $tempDirsFile"

	# return #
	echo "$tempDir"
}

function requireDir() # args: dirPath [, makeDirIfNotFound]
{
	local dirPath="$1"
	local makeDirIfNotFound="$2"
				
	if [[ ! -d "$dirPath" ]]; then
		if [[ $makeDirIfNotFound == true ]]; then
			mkdir -p "$dirPath" || \
				panic $? "Failed to create directory $dirPath"
		else
			panic 1 "Directory $dirPath not found"
		fi
	fi
}

function changeMode() # args: mode, target [, recursive]
{
	local mode="$1"
	local target="$2"
	local recursive="$3"
	local options

	[[ $recursive == false ]] || \
		options="-R"

	if [[ -e "$target" ]]; then
		chmod $options "$mode" "$target" || \
			panic $? "Failed to change mode to $mode on $target"
	fi
}

function changeOwn() # args: ownerAndOrGroup, target [, recursive]
{
	local ownerAndOrGroup="$1"
	local target="$2"
	local recursive="$3"
	local options
	
	[[ $recursive == false ]] || \
		options="-R"
		
	if [[ -e "$target" ]]; then
		chown $options "$ownerAndOrGroup" "$target" || \
			panic $? "Failed to change ownership to $ownerAndOrGroup on $target"
	fi
}

function changeOwnAndMode() # args: ownerGroup, mode, target
{
	local own="$1"
	local mode="$2"
	local target="$3"

	changeOwn "$own" "$target"
	changeMode "$mode" "$target"
}

function makeDir()
{
	local dirPath="$1"
	
	requireDir "$dirPath" true
	changeOwnAndMode "0:0" 0755 "$dirPath"
}

function doesFileContain() # args: filePath, pattern
{
	$setCmd
	
	local filePath="$1"
	local pattern="$2"
	local grepReturn
	local funcReturn
	
	set -e
	grep -Piq "$pattern" "$filePath" || grepReturn=$?
	set +e

	if [[ $grepReturn == "" || $grepReturn == 0 ]]; then # contains
		funcReturn=true
	elif [[ $grepReturn == 1 ]]; then # doesn't contain
		funcReturn=false
	else # error
		panic $grepReturn "Failed to grep $filePath"
	fi
	
	# return #
	echo $funcReturn
}

function determineUserBashProfileFile()
{
	$setCmd

	local f
	local filePath
	
	for f in "${bashProfileFiles[@]}"; do
		if [[ -f "$f" ]]; then
			filePath="$f"
			echo "" >> "$f" || \
				panic $? "Failed to echo into $f"
			break
		fi
	done
	
	if [[ $filePath == "" ]]; then

		filePath="$bashProfileFiles" # use first array item
		
		touch "$filePath" || \
			panic $? "Failed to touch $filePath"
			
		changeOwn "$userName:$userGroup" "$filePath"
		changeMode 0600 "$filePath"
	fi
	
	# return #
	
	echo "$filePath"
}

function addToFileIfMissing() # args: filePath, pattern, value
{
	local filePath="$1"
	local pattern="$2"
	local value="$3"
	local doesContain

	doesContain=`doesFileContain "$filePath" "$pattern"`
	
	[[ $doesContain == true ]] || \
		echo "$value" >> "$filePath" || \
			panic $? "Failed to echo into $filePath"	
}

function addUserLinkToTemplates() # no args
{
	local userDevDir="$HOME/Library/Developer"
	local userTemplatesDir="$userDevDir/Xcode/Templates"
	
	if [[ ! -d "$userTemplatesDir" ]]; then
		requireDir "$userTemplatesDir" true

		# change ownership up top (since requireDir may have created parent dirs) #
		changeOwn "$userName:$userGroup" "$userDevDir" true
	fi
	
	ln -fhs "$iOSOpenDevPath/templates" "$userTemplatesDir/iOSOpenDev"
}

# options #

while [[ "$1" != "" ]]; do case "$1" in
	-h|--help)
		echo "iOSOpenDev -- setup system and user environment
Usage: $scriptName"
		exit 1
	;;
	*)
		echo "Invalid option: $1"
		exit 1
	;;
esac; done

# start #

# filesystem #

echo "Creating directories..."
makeDir "$iOSOpenDevPath"
makeDir "$iOSOpenDevPath/bin"
makeDir "$iOSOpenDevPath/include"
makeDir "$iOSOpenDevPath/lib"
makeDir "$iOSOpenDevPath/templates"

# user filesystem #

echo "Creating symlink to Xcode templates..."
addUserLinkToTemplates

# bash profile #

echo "Modifying Bash personal initialization file..."
userBashProfileFile=`determineUserBashProfileFile`
addToFileIfMissing "$userBashProfileFile" "^(export)? *iOSOpenDevPath=.*" "export iOSOpenDevPath=$iOSOpenDevPath"
addToFileIfMissing "$userBashProfileFile" "^(export)? *iOSOpenDevDevice=.*" "export iOSOpenDevDevice="
addToFileIfMissing "$userBashProfileFile" "^(export)? *PATH=.*(\\\$iOSOpenDevPath/bin|$iOSOpenDevPath/bin).*" "export PATH=$iOSOpenDevPath/bin:\$PATH"
addToFileIfMissing "$userBashProfileFile" "^(export)? *PATH=.*/opt/local/bin:.*" "export PATH=/opt/local/bin:\$PATH"
addToFileIfMissing "$userBashProfileFile" "^(export)? *PATH=.*/opt/local/sbin:.*" "export PATH=/opt/local/sbin:\$PATH"

# finished #
exit 0
